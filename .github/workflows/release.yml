# =============================================================================
# RELEASE AUTOMATION WORKFLOW - CURRENTLY DISABLED
# =============================================================================
# This workflow is ready to use but disabled until needed.
# 
# To enable:
# 1. Remove the comment from the 'on:' trigger below
# 2. Set up the required secrets in GitHub:
#    - TAURI_PRIVATE_KEY: Your Tauri signing key
#    - TAURI_KEY_PASSWORD: Password for the signing key
# 3. Ensure you have a GitHub token with write permissions
#
# To create a release:
# 1. Update version in package.json and src-tauri/Cargo.toml
# 2. Create and push a tag: git tag v0.1.0 && git push origin v0.1.0
# 3. This workflow will automatically build and create the release
# =============================================================================

name: "Release"

# Uncomment the following lines to enable this workflow:
# on:
#   push:
#     tags:
#       - 'v*'

# DISABLED - workflow will not run until 'on:' trigger is uncommented above
on:
  workflow_dispatch:  # Manual trigger only for now

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get version from package.json
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Backupper v${{ steps.version.outputs.version }}
          body: |
            ## What's New in v${{ steps.version.outputs.version }}

            ### Features
            - TODO: Add release notes

            ### Bug Fixes
            - TODO: Add bug fixes

            ### Installation
            - **macOS**: Download the .dmg file
            - **Windows**: Download the .msi or .exe file

            ### Notes
            - TODO: Add any important notes

            ---
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.version.outputs.version }}...v${{ steps.version.outputs.version }}
          draft: true
          prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    name: Publish Release
    needs: [create-release, build-release]
    runs-on: ubuntu-latest

    steps:
      - name: Publish release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              draft: false,
            })
