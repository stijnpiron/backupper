name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Frontend checks
  frontend-lint:
    name: Frontend Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript type check
        run: pnpm exec tsc --noEmit

      - name: Lint check
        run: pnpm lint
        continue-on-error: true

  # Frontend build
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm build

  # Frontend tests (when tests are added)
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        id: test
        run: |
          if grep -q "\"test\":" package.json; then
            pnpm test --run --coverage
            echo "has_tests=true" >> $GITHUB_OUTPUT
          else
            echo "has_tests=false" >> $GITHUB_OUTPUT
            echo "No test script found, skipping tests"
            echo "## ⚠️ Frontend Tests" >> $GITHUB_STEP_SUMMARY
            echo "No test script configured yet. Add tests to improve code quality!" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

      - name: Upload coverage reports
        if: always() && steps.test.outputs.has_tests == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: coverage/
          if-no-files-found: ignore

      - name: Comment test coverage on PR
        if: github.event_name == 'pull_request' && steps.test.outputs.has_tests == 'true' && hashFiles('coverage/coverage-summary.json') != ''
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          json-summary-path: ./coverage/coverage-summary.json
          json-final-path: ./coverage/coverage-final.json
        continue-on-error: true

  # Rust checks
  rust-check:
    name: Rust Check & Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Cargo check
        run: cargo check --manifest-path=./src-tauri/Cargo.toml

      - name: Clippy
        run: cargo clippy --manifest-path=./src-tauri/Cargo.toml -- -D warnings

      - name: Format check
        run: cargo fmt --manifest-path=./src-tauri/Cargo.toml --all -- --check

  # Rust tests
  rust-test:
    name: Rust Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Run tests
        run: cargo nextest run --manifest-path=./src-tauri/Cargo.toml --profile ci --no-fail-fast
        continue-on-error: true

      - name: Generate test report
        if: always()
        run: |
          cargo test --manifest-path=./src-tauri/Cargo.toml -- --nocapture --test-threads=1 > test-results.txt 2>&1 || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rust-test-results
          path: test-results.txt

      - name: Publish test summary
        if: always()
        run: |
          echo "## 🧪 Rust Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat test-results.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Full Tauri build test (Linux) - DISABLED until app has meaningful functionality
  # Uncomment when ready to test full builds
  # tauri-build-linux:
  #   name: Tauri Build (Linux)
  #   runs-on: ubuntu-latest
  #   needs: [frontend-build, rust-check]
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: 10
  #
  #     - name: Setup Rust
  #       uses: dtolnay/rust-toolchain@stable
  #
  #     - name: Rust cache
  #       uses: swatinem/rust-cache@v2
  #       with:
  #         workspaces: './src-tauri -> target'
  #
  #     - name: Install dependencies (Ubuntu)
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
  #
  #     - name: Install frontend dependencies
  #       run: pnpm install --frozen-lockfile
  #
  #     - name: Build Tauri app
  #       run: pnpm tauri build
  #       env:
  #         TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  #         TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

  # macOS build - DISABLED until app has meaningful functionality
  # Uncomment when ready to test full builds (only runs on main branch to save CI minutes)
  # tauri-build-macos:
  #   name: Tauri Build (macOS)
  #   runs-on: macos-latest
  #   needs: [frontend-build, rust-check]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: 10
  #
  #     - name: Setup Rust
  #       uses: dtolnay/rust-toolchain@stable
  #
  #     - name: Rust cache
  #       uses: swatinem/rust-cache@v2
  #       with:
  #         workspaces: './src-tauri -> target'
  #
  #     - name: Install frontend dependencies
  #       run: pnpm install --frozen-lockfile
  #
  #     - name: Build Tauri app
  #       run: pnpm tauri build
  #       env:
  #         TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  #         TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
